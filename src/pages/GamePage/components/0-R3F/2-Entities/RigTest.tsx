/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 pccc_rig_test_noAnim_v2.glb --transform --precision=10 --shadows --keepnames --meta --types
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { FC, memo } from "react";
import { Bone, Mesh, MeshStandardMaterial, SkinnedMesh } from "three";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    object_1_collider: Mesh;
    object_0_collider: Mesh;
    object_combined_SkinnedMesh_0: SkinnedMesh;
    root_bone: Bone;
  };
  materials: {
    object_combined_material: MeshStandardMaterial;
  };
};

const RigTest: FC = (props: JSX.IntrinsicElements["group"]) => {
  const { nodes, materials } = useGLTF(
    "/game_assets/models/pccc_rig_test_noAnim_v2-transformed.glb",
  ) as GLTFResult;

  console.log("nodes", nodes);
  console.log("material", materials);

  useFrame((state, delta) => {
    nodes.object_0_collider.position.x = 0;
  });
  return (
    <group {...props} dispose={null}>
      <skinnedMesh
        onClick={() => console.log("hey")}
        name="object_combined_SkinnedMesh_0"
        geometry={nodes.object_combined_SkinnedMesh_0.geometry}
        material={materials.object_combined_material}
        skeleton={nodes.object_combined_SkinnedMesh_0.skeleton}
        userData={{ name: "object_combined_SkinnedMesh_0" }}
      />

      {/* <skinnedMesh
        name="object_0_collider"
        onClick={() => console.log("clicked")}
        material={materials.object_combined_material}
        geometry={nodes.object_0_collider.geometry}
        skeleton={nodes.object_0_bone.skeleton}
        userData={{ name: "object_combined_SkinnedMesh_0" }}
      /> */}

      <primitive object={nodes.root_bone} />
    </group>
  );
};

useGLTF.preload("/game_assets/models/pccc_rig_test_noAnim_v2-transformed.glb");

export default memo(RigTest);

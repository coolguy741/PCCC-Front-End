/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 pccc_rig_test_noAnim.glb --transform --precision=10 --shadows --keepnames --meta --types
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    object_1_collider: THREE.Mesh
    object_0_collider: THREE.Mesh
    Sphere006: THREE.SkinnedMesh
    Sphere006_1: THREE.SkinnedMesh
    root: THREE.Bone
  }
  materials: {
    Material: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
  }
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/pccc_rig_test_noAnim-transformed.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group name="object_combined" userData={{ name: 'object_combined' }}>
        <skinnedMesh name="Sphere006" geometry={nodes.Sphere006.geometry} material={materials['Material.001']} skeleton={nodes.Sphere006.skeleton} />
        <skinnedMesh name="Sphere006_1" geometry={nodes.Sphere006_1.geometry} material={materials['Material.002']} skeleton={nodes.Sphere006_1.skeleton} />
      </group>
      <primitive object={nodes.root} />
    </group>
  )
}

useGLTF.preload('/pccc_rig_test_noAnim-transformed.glb')
